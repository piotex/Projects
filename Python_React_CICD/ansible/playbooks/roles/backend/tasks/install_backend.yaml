---
- name: Ensure python3 and pip are installed
  ansible.builtin.dnf:
    name:
      - python3
      - python3-pip
    state: present

- name: Install virtualenv via pip
  ansible.builtin.pip:
    name:
      - virtualenv
    executable: pip3
    state: present

- name: Create "{{ backend_user }}" user
  ansible.builtin.user:
    name: "{{ backend_user }}"
    state: present
    shell: /sbin/nologin
    system: yes

- name: Create application directory
  ansible.builtin.file:
    path: "{{ backend_path }}"
    state: directory
    owner: "{{ backend_user }}"
    group: "{{ backend_user }}"
    mode: '0755'

- name: Create Python virtual environment
  ansible.builtin.command: python3 -m venv "{{ backend_venv_path }}"
  args:
    chdir: "{{ backend_path }}"

- name: Copy requirements.txt to app directory
  ansible.builtin.copy:
    src: files/requirements.txt
    dest: "{{ backend_path }}/requirements.txt"
    owner: "{{ backend_user }}"
    group: "{{ backend_user }}"
    mode: '0644'

- name: Install dependencies from requirements.txt
  ansible.builtin.pip:
    requirements: "{{ backend_path }}/requirements.txt"
    virtualenv: "{{ backend_venv_path }}"
    state: present

- name: Copy app.py to app directory
  ansible.builtin.copy:
    src: files/app.py
    dest: "{{ backend_path }}/app.py"
    owner: "{{ backend_user }}"
    group: "{{ backend_user }}"
    mode: '0644'

- name: Create backend.service systemd file
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service
    owner: root
    group: root
    mode: '0644'

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable and start backend service
  ansible.builtin.systemd:
    name: backend
    state: restarted
    enabled: yes

- name: Open port {{ backend_port }} on the firewall
  ansible.posix.firewalld:
    port: "{{ backend_port }}/tcp"
    state: enabled
    permanent: yes
    immediate: yes