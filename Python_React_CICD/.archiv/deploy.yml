---
- hosts: all
  become: yes
  gather_facts: no
  tasks:
    - name: Stop {{ backend_name }} service before deployment
      ansible.builtin.systemd:
        name: "{{ backend_name }}.service"
        state: stopped
      ignore_errors: yes

    - name: Deploy application files from backend directory
      ansible.builtin.copy:
        src: ../backend/
        dest: "{{backend_app_directory }}"
        owner: "{{ python_user }}"
        group: "{{ python_group }}"
        mode: "0755"

    - name: Check if virtual environment already exists
      ansible.builtin.stat:
        path: "{{backend_app_directory }}/venv/bin/activate"
      register: venv_exists

    - name: Create virtual environment if it does not exist
      ansible.builtin.command: "{{ python_version_to_use }} -m venv {{backend_app_directory }}/venv"
      args:
        creates: "{{backend_app_directory }}/venv/bin/activate"
      become_user: "{{ python_user }}"
      when: not venv_exists.stat.exists

    - name: Install or update Python dependencies from requirements.txt
      ansible.builtin.pip:
        requirements: "{{backend_app_directory }}/requirements.txt"
        virtualenv: "{{backend_app_directory }}/venv"
        extra_args: "--upgrade pip"
      become_user: "{{ python_user }}"

    - name: Start/Restart {{ backend_name }} service after deployment
      ansible.builtin.systemd:
        name: "{{ backend_name }}.service"
        state: restarted
        daemon_reload: yes

    - name: Get systemctl status for {{ backend_name }}
      ansible.builtin.command: systemctl status {{ backend_name }}
      register: service_status_output
      changed_when: false
      ignore_errors: yes

    - name: Extract and print active status
      ansible.builtin.debug:
        msg: "{{ (service_status_output.stdout_lines | select('search', 'Active:') | list)[0] | default('Active status not found') }}"
